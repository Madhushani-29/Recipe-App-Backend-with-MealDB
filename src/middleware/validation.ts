import { body, validationResult } from "express-validator";
import { Request, Response, NextFunction } from "express";

//middleware designed to handle validation errors generated by the Express Validator library
const handleValidationErrors = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ errors: errors.array() });
  }
  next();
};

// array contains a list of middleware functions used to validate the request body fields
export const validateUserRequest = [
  body("email")
    .isString()
    .notEmpty()
    .matches(/^[\w.%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$/)
    .withMessage("Email must be a valid email"),
  body("password")
    .isString()
    .notEmpty()
    .matches(
      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/
    )
    .withMessage(
      "Password must be at least 8 characters long, include at least one uppercase letter, one lowercase letter, one number, and one special character (@$!%*?&)"
    ),
  handleValidationErrors,
];
