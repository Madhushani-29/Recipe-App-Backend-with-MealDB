import { body, validationResult } from "express-validator";
import { Request, Response, NextFunction } from "express";

//middleware designed to handle validation errors generated by the Express Validator library
const handleValidationErrors = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ errors: errors.array() });
  }
  next();
};

export const validateRegisterUserRequest = [
  body("email")
    .isEmail()
    .withMessage("Please enter a valid email address.")
    .normalizeEmail()
    .notEmpty()
    .withMessage("Email is required."),
  body("password")
    .notEmpty()
    .withMessage("Password is required.")
    .isLength({ min: 6 })
    .withMessage("Password must be at least 6 characters long."),
  body("firstName")
    .notEmpty()
    .withMessage("First name is required.")
    .isAlpha()
    .withMessage("First name should only contain letters and spaces."),

  body("lastName")
    .notEmpty()
    .withMessage("Last name is required.")
    .isAlpha()
    .withMessage("Last name should only contain letters and spaces."),
  body("phone")
    .notEmpty()
    .withMessage("Phone number is required.")
    .matches(/^07\d{8}$/)
    .withMessage(
      "Phone number must be a valid Sri Lankan number starting with 07 and followed by 8 digits."
    ),
  handleValidationErrors,
];

// array contains a list of middleware functions used to validate the request body fields
export const validateLoginUserRequest = [
  body("email")
    .isString()
    .notEmpty()
    .matches(/^[\w.%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$/)
    .withMessage("Email must be a valid email"),
  body("password")
    .isString()
    .notEmpty()
    .matches(
      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/
    )
    .withMessage(
      "Password must be at least 8 characters long, include at least one uppercase letter, one lowercase letter, one number, and one special character (@$!%*?&)"
    ),
  handleValidationErrors,
];
