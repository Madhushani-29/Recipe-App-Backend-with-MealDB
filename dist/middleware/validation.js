"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateLoginUserRequest = exports.validateRegisterUserRequest = void 0;
const express_validator_1 = require("express-validator");
//middleware designed to handle validation errors generated by the Express Validator library
const handleValidationErrors = (req, res, next) => __awaiter(void 0, void 0, void 0, function* () {
    const errors = (0, express_validator_1.validationResult)(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }
    next();
});
exports.validateRegisterUserRequest = [
    (0, express_validator_1.body)("email")
        .isEmail()
        .withMessage("Please enter a valid email address.")
        .normalizeEmail(),
    (0, express_validator_1.body)("password")
        .notEmpty()
        .withMessage("Password is required.")
        .isLength({ min: 6 })
        .withMessage("Password must be at least 6 characters long."),
    (0, express_validator_1.body)("firstName")
        .optional()
        .isAlpha()
        .withMessage("First name should only contain letters."),
    (0, express_validator_1.body)("lastName")
        .optional()
        .isAlpha()
        .withMessage("Last name should only contain letters."),
    (0, express_validator_1.body)("phone")
        .optional()
        .matches(/^07\d{8}$/)
        .withMessage("Phone number must be a valid Sri Lankan number starting with 07 and followed by 8 digits."),
];
// array contains a list of middleware functions used to validate the request body fields
exports.validateLoginUserRequest = [
    (0, express_validator_1.body)("email")
        .isString()
        .notEmpty()
        .matches(/^[\w.%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$/)
        .withMessage("Email must be a valid email"),
    (0, express_validator_1.body)("password")
        .isString()
        .notEmpty()
        .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/)
        .withMessage("Password must be at least 8 characters long, include at least one uppercase letter, one lowercase letter, one number, and one special character (@$!%*?&)"),
    handleValidationErrors,
];
